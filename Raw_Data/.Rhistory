s[i-1]<-sum(x[1:i-1])
}
n<-n+1
if(sum(x[1:i-1])>=20)
break
}
set.seed(20)
m<-20
x<-c()
s<-c()
n<-1
repeat {
for (i in 1:n)  {
x[i]<-sample(1:6,1)
}
for (i in 1:n) {
s[i-1]<-sum(x[1:i-1])
}
n<-n+1
if(sum(x[1:i-1])>=20)
break
}
mean(s)-m
sd(s)
sd(s)-m
m1<-10000
set.seed(20)
m<-20
m1<-10000
x<-c()
s<-c()
n<-1
repeat {
for (i in 1:n)  {
x[i]<-sample(1:6,1)
}
for (i in 1:n) {
s[i-1]<-sum(x[1:i-1])
}
n<-n+1
if(sum(x[1:i-1])>=10000)
break
}
set.seed(20)
m<-20
x<-c()
s<-c()
n<-1
repeat {
for (i in 1:n)  {
x[i]<-sample(1:6,1)
}
for (i in 1:n) {
s[i-1]<-sum(x[1:i-1])
}
n<-n+1
if(sum(x[1:i-1])>=m)
break
}
mean(s)-m
sd(s)-m
set.seed(200)
m1<-10000
x1<-c()
s1<-c()
n1<-1
repeat {
for (i in 1:n1)  {
x1[i]<-sample(1:6,1)
}
for (i in 1:n1) {
s1[i-1]<-sum(x1[1:i-1])
}
n1<-n1+1
if(sum(x1[1:i-1])>=m1)
break
}
setwd("/Volumes/USB30FD")
GetSwap <- function(region)
{
#region = 'dc'
RawSwap <- data.table(read.csv(paste0("SWAP_", toupper(region)
, "_ALL.csv"))
,stringsAsFactors = FALSE)
# going to have to remove final row on raw data integration
# swap[,'region':=as.factor(region)]
CSwap <- data.table(
date = as.Date(paste(RawSwap$Month, RawSwap$Year, "01", sep="-"), format="%b-%Y-%d"),
#RawSwap[, 'date': = (as.Date(paste(Month,Year, "01", sep="-"), format="%b-%Y-%d"))]
#RawSwap[, 'minted': = as.numeric(gsub(",","",Issued.In.Month))]
minted = as.numeric(gsub(",","",RawSwap$Issued.In.Month)),
#RawWwap[, 'capacity': = as.numeric(gsub(",","", Active.KW.DC))]
capacity = as.numeric(gsub(",","", RawSwap$Active.KW.DC)),
region = as.factor(RawSwap$State),
month = as.factor(RawSwap$Month))
CSwap[,l.minted:= log(minted + 1)]
CSwap[,l.capacity:= log(capacity +1)]
CSwap[,production.rate:= minted/(capacity/10)]
#[, Issued.In.Month: = NULL]
CSwap <- CSwap[order(date)]
return(CSwap)
}
CSwap <- GetSwap('dc')
library("astsa", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("data.table", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
CSwap <- GetSwap('dc')
t.minted <- ts(CSwap$minted,frequency=12,
start = c(year(min(CSwap[, date])),
month(min(CSwap[, date]))),
end = c(year(max(CSwap[, date])),
month(max(CSwap[, date]))))
t.minted <- ts(CSwap$l.minted,frequency=12,
start = c(year(min(CSwap[, date])),
month(min(CSwap[, date]))),
end = c(year(max(CSwap[, date])),
month(max(CSwap[, date]))))
minted.fit <- lm(l.minted ~ l.capacity + trend, data = CSwap)
trend <- time(t.minted)
minted.fit <- lm(l.minted ~ l.capacity + trend, data = CSwap)
f.length <- length(seq.Date(from = max(CSwap[,date])
,to = as.Date(paste0(scope[2], '-12-01'))
,by ='months')) - 1
scope = c(2005,2030)
f.length <- length(seq.Date(from = max(CSwap[,date])
,to = as.Date(paste0(scope[2], '-12-01'))
,by ='months')) - 1
minted.f.cast <- forecast(minted.fit, h = f.length)
t.cap <- ts(CSwap$capacity,frequency=12,
start = c(year(min(CSwap[, date])),
month(min(CSwap[, date]))),
end = c(year(max(CSwap[, date])),
month(max(CSwap[, date]))))
cap.fit <- lm(t.cap ~ time(t.cap))
f.length <- length(seq.Date(from = max(CSwap[,date])
,to = as.Date(paste0(scope[2], '-12-01'))
,by ='months')) - 1
cap.fcast <- forecast.lm(cap.fit, h = f.length)
cap.fit <- tslm(t.cap ~ trend)
cap.fcast <- forecast.lm(cap.fit, h = f.length)
plot(cap.fcast)
cap.fcast
minted.fit <- lm(l.minted ~ l.capacity + trend, data = CSwap)
minted.f.cast <- forecast(minted.fit, data.frame = c(l.capacity = log(cap.fcast$mean)))
minted.f.cast <- forecast(minted.fit, newdata = data.frame(l.capacity = log(cap.fcast$mean)))
minted.f.cast <- forecast.lm(minted.fit, newdata = data.frame(l.capacity = log(cap.fcast$mean)))
minted.fit <- tslm(l.minted ~ l.capacity + trend, data = CSwap)
t.cap1 <- ts(CSwap$l.capacity,frequency=12,
start = c(year(min(CSwap[, date])),
month(min(CSwap[, date]))),
end = c(year(max(CSwap[, date])),
month(max(CSwap[, date]))))
minted.fit <- tslm(t.minted ~ t.cap1 + trend, data = CSwap)
minted.fit <- tslm(t.minted ~ t.cap1 + trend)
minted.f.cast <- forecast.lm(minted.fit, newdata = data.frame(l.capacity = log(cap.fcast$mean)))
minted.fit <- lm(t.minted ~ t.cap1 + trend)
minted.f.cast <- forecast.lm(minted.fit, newdata = data.frame(l.capacity = log(cap.fcast$mean)))
minted.f.cast <- forecast.lm(minted.fit, newdata = data.frame(t.cap1 = log(cap.fcast$mean)))
minted.f.cast <- forecast.lm(minted.fit, newdata = data.frame(c(t.cap1 = log(cap.fcast$mean),
trend = trend)))
require(rgl)
library(data.table)
r <- 0.06  # interest rte
delta <- 1/12  # time step
dis <- exp(-r*delta) #calculate discount rate
alpha5 <- 0.12 # parameter alpha 5 from the mintfit
tao <- 5 # SREC life
N <- 12*tao # total steps
# initialize ghat, b, surface and price
ghat <- rep(0, 60)
surface <- data.table(acc.srec = 0,
price = 0,
time = 0)
b <- matrix(, nrow = N, ncol = 2)
B <- seq(0, 3000, 50)
b[,1] <- B
p <- matrix(, nrow = N, ncol = N)
bf <- rep(0, 5)
# initialize range for rounding later
range <- 50
range <- range + 0.0000001
# try to see if you can generate a b*ghat grid
# abitrage setting eplison
sigma <- 50
epsilon <- c(-100,-50,0,50,100)
e.step <- (max(epsilon)-min(epsilon))/(2*(length(epsilon)-1))
e.probs <- c(pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[2]+e.step,0,sigma)-pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[3]+e.step,0,sigma)-pnorm(epsilon[2]+e.step,0,sigma)
,pnorm(epsilon[4]+e.step,0,sigma)-pnorm(epsilon[3]+e.step,0,sigma)
,1-pnorm(epsilon[4]+e.step,0,sigma)
)
Eps <- rep(c(-100,-50,0,50,100), N)
# Actual requirement devided by 1000, actual price
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12))
for (i in N:2) {
ghat[i] <- (exp(0.12*i))/1000
for (j in 1 : N) {
for (n in 1 : 5) {
if (i != N) {
bf[n] <- ifelse(i%%12 == 0, max(0, min(2400, b[j, 1] + ghat[i] + Eps[n] - R)),
max(0, min(2400,b[j, 1] + ghat[i] + Eps[n])))
nearest <- apply(sapply(bf, function( x ) abs( x - B)), 2, which.min)
b[n, 2] <- b[nearest[n],1]
fiveB <- data.table(acc.srec = b[1:5,2], time = i)
fivePrice <- merge(fiveB, surface, by = c("acc.srec", "time"), by.x = T)
p[j, i-1] <- dis*(e.probs[1]*fivePrice$price[1] + e.probs[2]*fivePrice$price[2] + e.probs[3]*fivePrice$price[3] +
e.probs[4]*fivePrice$price[4] + e.probs[5]*fivePrice$price[5])
}  else  {
b[n, 2] <- max(0, b[j, 1] + (exp(0.12*48))/1000 + Eps[n] - R)
p[n, N] <- ifelse(b[n, 2]==0, ACP[i], 0)
p[j, i-1] <- dis*(e.probs[1]*p[1, N] + e.probs[2]*p[2, N] + e.probs[3]*p[3, N] +
e.probs[4]*p[4, N] + e.probs[5]*p[5, N])
}
}
}
surface.temp <- data.table(acc.srec = B, price = p[, i-1], time = i-1)
surface <- rbind(surface.temp, surface)
}
plot3d(surface$acc.srec,surface$time,surface$price)
r <- 0.06  # interest rte
delta <- 1/12  # time step
dis <- exp(-r*delta) #calculate discount rate
alpha5 <- 0.12 # parameter alpha 5 from the mintfit
tao <- 5 # SREC life
N <- 12*tao # total steps
# initialize ghat, b, surface and price
ghat <- rep(0, 60)
surface <- data.table(acc.srec = 0,
price = 0,
time = 0)
b <- matrix(, nrow = N, ncol = 2)
B <- seq(0, 3000, 60)
b[,1] <- B
p <- matrix(, nrow = N, ncol = N)
bf <- rep(0, 5)
# initialize range for rounding later
range <- 50
range <- range + 0.0000001
# try to see if you can generate a b*ghat grid
# abitrage setting eplison
sigma <- 50
epsilon <- c(-100,-50,0,50,100)
e.step <- (max(epsilon)-min(epsilon))/(2*(length(epsilon)-1))
e.probs <- c(pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[2]+e.step,0,sigma)-pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[3]+e.step,0,sigma)-pnorm(epsilon[2]+e.step,0,sigma)
,pnorm(epsilon[4]+e.step,0,sigma)-pnorm(epsilon[3]+e.step,0,sigma)
,1-pnorm(epsilon[4]+e.step,0,sigma)
)
Eps <- rep(c(-100,-50,0,50,100), N)
# Actual requirement devided by 1000, actual price
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12))
for (i in N:2) {
ghat[i] <- (exp(0.12*i))/1000
for (j in 1 : N) {
for (n in 1 : 5) {
if (i != N) {
bf[n] <- ifelse(i%%12 == 0, max(0, min(2400, b[j, 1] + ghat[i] + Eps[n] - R)),
max(0, min(2400,b[j, 1] + ghat[i] + Eps[n])))
nearest <- apply(sapply(bf, function( x ) abs( x - B)), 2, which.min)
b[n, 2] <- b[nearest[n],1]
fiveB <- data.table(acc.srec = b[1:5,2], time = i)
fivePrice <- merge(fiveB, surface, by = c("acc.srec", "time"), by.x = T)
p[j, i-1] <- dis*(e.probs[1]*fivePrice$price[1] + e.probs[2]*fivePrice$price[2] + e.probs[3]*fivePrice$price[3] +
e.probs[4]*fivePrice$price[4] + e.probs[5]*fivePrice$price[5])
}  else  {
b[n, 2] <- max(0, b[j, 1] + (exp(0.12*48))/1000 + Eps[n] - R)
p[n, N] <- ifelse(b[n, 2]==0, ACP[i], 0)
p[j, i-1] <- dis*(e.probs[1]*p[1, N] + e.probs[2]*p[2, N] + e.probs[3]*p[3, N] +
e.probs[4]*p[4, N] + e.probs[5]*p[5, N])
}
}
}
surface.temp <- data.table(acc.srec = B, price = p[, i-1], time = i-1)
surface <- rbind(surface.temp, surface)
}
plot3d(surface$acc.srec,surface$time,surface$price)
require(rgl)
library(data.table)
r <- 0.06  # interest rte
delta <- 1/12  # time step
dis <- exp(-r*delta) #calculate discount rate
alpha5 <- 0.12 # parameter alpha 5 from the mintfit
tao <- 5 # SREC life
N <- 12*tao # total steps
ghat <- rep(0, 60)
surface <- data.table(acc.srec = 0,
price = 0,
time = 0)
b <- matrix(, nrow = N, ncol = 2)
B <- seq(0, 3000, 50)
b[,1] <- B
B <- seq(0, 2950, 50)
b[,1] <- B
p <- matrix(, nrow = N, ncol = N)
bf <- rep(0, 5)
range <- 50
range <- range + 0.0000001
sigma <- 50
epsilon <- c(-100,-50,0,50,100)
e.step <- (max(epsilon)-min(epsilon))/(2*(length(epsilon)-1))
e.probs <- c(pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[2]+e.step,0,sigma)-pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[3]+e.step,0,sigma)-pnorm(epsilon[2]+e.step,0,sigma)
,pnorm(epsilon[4]+e.step,0,sigma)-pnorm(epsilon[3]+e.step,0,sigma)
,1-pnorm(epsilon[4]+e.step,0,sigma)
)
Eps <- rep(c(-100,-50,0,50,100), N)
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12))
for (i in N:2) {
ghat[i] <- (exp(0.12*i))/1000
for (j in 1 : N) {
for (n in 1 : 5) {
if (i != N) {
bf[n] <- ifelse(i%%12 == 0, max(0, min(2400, b[j, 1] + ghat[i] + Eps[n] - R)),
max(0, min(2400,b[j, 1] + ghat[i] + Eps[n])))
nearest <- apply(sapply(bf, function( x ) abs( x - B)), 2, which.min)
b[n, 2] <- b[nearest[n],1]
fiveB <- data.table(acc.srec = b[1:5,2], time = i)
fivePrice <- merge(fiveB, surface, by = c("acc.srec", "time"), by.x = T)
p[j, i-1] <- dis*(e.probs[1]*fivePrice$price[1] + e.probs[2]*fivePrice$price[2] + e.probs[3]*fivePrice$price[3] +
e.probs[4]*fivePrice$price[4] + e.probs[5]*fivePrice$price[5])
}  else  {
b[n, 2] <- max(0, b[j, 1] + (exp(0.12*48))/1000 + Eps[n] - R)
p[n, N] <- ifelse(b[n, 2]==0, ACP[i], 0)
p[j, i-1] <- dis*(e.probs[1]*p[1, N] + e.probs[2]*p[2, N] + e.probs[3]*p[3, N] +
e.probs[4]*p[4, N] + e.probs[5]*p[5, N])
}
}
}
surface.temp <- data.table(acc.srec = B, price = p[, i-1], time = i-1)
surface <- rbind(surface.temp, surface)
}
plot3d(surface$acc.srec,surface$time,surface$price)
for (i in N:2) {
ghat[i] <- (exp(0.12*i))/1000
for (j in 1 : N) {
for (n in 1 : 5) {
if (i != N) {
bf[n] <- ifelse(i%%12 == 0, max(0, min(2400, b[j, 1] + ghat[i] + Eps[n] - R)),
max(0, min(2400,b[j, 1] + ghat[i] + Eps[n])))
nearest <- apply(sapply(bf, function( x ) abs( x - B)), 2, which.min)
b[n, 2] <- b[nearest[n],1]
fiveB <- data.table(acc.srec = b[1:5,2], time = i)
fivePrice <- merge(fiveB, surface, by = c("acc.srec", "time"), by.x = T)
p[j, i-1] <- dis*(e.probs[1]*fivePrice$price[1] + e.probs[2]*fivePrice$price[2] + e.probs[3]*fivePrice$price[3] +
e.probs[4]*fivePrice$price[4] + e.probs[5]*fivePrice$price[5])
}  else  {
b[n, 2] <- max(0, b[j, 1] + (exp(0.12*48))/1000 + Eps[n] - R)
p[n, N] <- ifelse(b[n, 2]==0, ACP[i], 0)
p[j, i-1] <- dis*(e.probs[1]*p[1, N] + e.probs[2]*p[2, N] + e.probs[3]*p[3, N] +
e.probs[4]*p[4, N] + e.probs[5]*p[5, N])
}
}
}
surface.temp <- data.table(acc.srec = B, price = p[, i-1], time = i-1)
surface <- rbind(surface.temp, surface)
}
View(surface)
View(surface)
View(p)
View(p)
r <- 0.06  # interest rte
delta <- 1/12  # time step
dis <- exp(-r*delta) #calculate discount rate
alpha5 <- 0.12 # parameter alpha 5 from the mintfit
tao <- 5 # SREC life
N <- 12*tao # total steps
# initialize ghat, b, surface and price
ghat <- rep(0, 60)
surface <- data.table(acc.srec = 0,
price = 0,
time = 0)
b <- matrix(, nrow = N, ncol = 2)
B <- seq(0, 2950, 50)
b[,1] <- B
p <- matrix(, nrow = N, ncol = N)
bf <- rep(0, 5)
# initialize range for rounding later
range <- 50
range <- range + 0.0000001
# try to see if you can generate a b*ghat grid
# abitrage setting eplison
sigma <- 50
epsilon <- c(-100,-50,0,50,100)
e.step <- (max(epsilon)-min(epsilon))/(2*(length(epsilon)-1))
e.probs <- c(pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[2]+e.step,0,sigma)-pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[3]+e.step,0,sigma)-pnorm(epsilon[2]+e.step,0,sigma)
,pnorm(epsilon[4]+e.step,0,sigma)-pnorm(epsilon[3]+e.step,0,sigma)
,1-pnorm(epsilon[4]+e.step,0,sigma)
)
Eps <- rep(c(-100,-50,0,50,100), N)
# Actual requirement devided by 1000, actual price
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12), rep(308,12))
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12), rep(2360,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12), rep(308,12))
for (i in N:2) {
ghat[i] <- (exp(0.12*i))/1000
for (j in 1 : N) {
for (n in 1 : 5) {
if (i != N) {
bf[n] <- ifelse(i%%12 == 0, max(0, min(2400, b[j, 1] + ghat[i] + Eps[n] - R)),
max(0, min(2400,b[j, 1] + ghat[i] + Eps[n])))
nearest <- apply(sapply(bf, function( x ) abs( x - B)), 2, which.min)
b[n, 2] <- b[nearest[n],1]
fiveB <- data.table(acc.srec = b[1:5,2], time = i)
fivePrice <- merge(fiveB, surface, by = c("acc.srec", "time"), by.x = T)
p[j, i-1] <- dis*(e.probs[1]*fivePrice$price[1] + e.probs[2]*fivePrice$price[2] + e.probs[3]*fivePrice$price[3] +
e.probs[4]*fivePrice$price[4] + e.probs[5]*fivePrice$price[5])
}  else  {
b[n, 2] <- max(0, b[j, 1] + (exp(0.12*48))/1000 + Eps[n] - R)
p[n, N] <- ifelse(b[n, 2]==0, ACP[i], 0)
p[j, i-1] <- dis*(e.probs[1]*p[1, N] + e.probs[2]*p[2, N] + e.probs[3]*p[3, N] +
e.probs[4]*p[4, N] + e.probs[5]*p[5, N])
}
}
}
surface.temp <- data.table(acc.srec = B, price = p[, i-1], time = i-1)
surface <- rbind(surface.temp, surface)
}
plot3d(surface$acc.srec,surface$time,surface$price)
timestep <- [1:N]
timestep <- (1: 60)
require(rgl)
library(data.table)
r <- 0.06  # interest rte
delta <- 1/12  # time step
dis <- exp(-r*delta) #calculate discount rate
alpha5 <- 0.12 # parameter alpha 5 from the mintfit
tao <- 5 # SREC life
N <- 12*tao # total steps
surface <- data.table(acc.srec = 0,
price = 0,
time = 0)
sigma <- 50
epsilon <- c(-100,-50,0,50,100)
e.step <- (max(epsilon)-min(epsilon))/(2*(length(epsilon)-1))
e.probs <- c(pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[2]+e.step,0,sigma)-pnorm(epsilon[1]+e.step,0,sigma)
,pnorm(epsilon[3]+e.step,0,sigma)-pnorm(epsilon[2]+e.step,0,sigma)
,pnorm(epsilon[4]+e.step,0,sigma)-pnorm(epsilon[3]+e.step,0,sigma)
,1-pnorm(epsilon[4]+e.step,0,sigma)
)
Eps <- rep(c(-100,-50,0,50,100), N)
# Actual requirement devided by 1000, actual price
R<- c(rep(442,12), rep(596,12), rep(1707,12), rep(2071,12), rep(2360,12))
ACP <- c(rep(658,12), rep(641, 12), rep(339, 12), rep(315, 12), rep(308,12))
for t in timestep { }
for t in timestep { print t}
for t in timestep { print timestep[t]}
for (t in timestep) { print timestep[t]}
for (t in timestep) { print timestep[t]}
for (t in timestep) { timestep[t]}
t
library(foreach)
library(doParallel)
install.packages("doParallel")
library("doParallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(foreach)
library(doParallel)
library(parallel)
numCores <- detectCores()
cl <- makeCluster(numCores)
registerDoParallel(cl)
inputs <- 1:10
processInput <- function(i) {
i * i
}
processInput
processInput()
processInput(2)
processInput(for i in inputs)
processInput(inputs)
numCores
makeCluster(numCores)
results <- foreach(i=inputs) %dopar% {
processInput(i)
}
resulta
results
str(results)
setwd("~/Dropbox/PyPyPy/Raw_Data")
data <- read.csv("weatherMerge.csv", header = TRUE)
library(ggplot2)
theme.car_chart <-
theme(legend.position = "none") +
theme(plot.title = element_text(size=14, family="Trebuchet MS", face="bold", hjust=0, color="#666666")) +
theme(axis.title = element_text(size=14, family="Trebuchet MS", face="bold", color="#666666")) +
theme(axis.title.y = element_text(angle=0))
# SCATTERPLOT THEME
theme.car_chart_SCATTER <- theme.car_chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# HISTOGRAM THEME
theme.car_chart_HIST <- theme.car_chart +
theme(axis.title.x = element_text(hjust=0, vjust=-.5))
# SMALL MULTIPLE THEME
theme.car_chart_SMALLM <- theme.car_chart +
theme(panel.grid.minor = element_blank()) +
theme(strip.text.x = element_text(size=16, family="Trebuchet MS", face="bold", color="#666666"))
small = subset(data, Program == 'Small Commercial (< 10 kW) and All Residential')
large = subset(data, Program == 'Large Commercial (>= 10 kW)')
require(GGally)
p <- ggpairs(data[c(4:6,9:12)],upper = "blank")
p
pairs(data[c(4:6,9:12)])
